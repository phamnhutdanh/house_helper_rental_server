generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AccountInfoRole {
  ADMIN
  CUSTOMER
  EMPLOYEE
}

enum AccountStatus {
  BANNED
  NONE
  WARNING
}

enum EmployeeAccountStatus {
  PENDING
  ACCEPTED
  CANCELED
}

enum BookingStatus {
  PENDING
  ACCEPTED
  CANCELED
  COMPLETED
}

enum PaymentMethod {
  COD
  MOMO
}

enum TimeRange {
  MORNING
  AFTERNOON
  EVENING
}

enum WeekDay {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum AddressType {
  DEFAULT
  NONE
}

enum ScheduleType {
  CUSTOM
  REGULAR
  NONE
}

enum RepeatBookingStatus {
  NO_REPEAT
  EVERY_DAY
  EVERY_WEEK
  EVERY_MONTH
}

model AccountInfo {
  id          String          @id @default(cuid())
  email       String          @unique
  accountRole AccountInfoRole @default(CUSTOMER)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  status      AccountStatus   @default(NONE)

  sessions SessionInfo[]
  customer Customer?
  employee Employee?

  @@map("accounts_info")
}

model SessionInfo {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  accessToken  String

  expiresAt            Int?     @default(0)
  expiresIn            Int?     @default(0)
  isExpired            Boolean? @default(false)
  providerRefreshToken String?  @default("")
  providerToken        String?  @default("")
  refreshToken         String?  @default("")
  tokenType            String?  @default("")

  accountInfoId String      @unique
  accountInfo   AccountInfo @relation(fields: [accountInfoId], references: [id], onDelete: Cascade)

  @@map("sessions_info")
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model Address {
  id       String @id @default(cuid())
  fullName String
  phone    String
  address  String

  customerAddresses CustomerAddress[]
  employeeAddresses EmployeeAddress[]

  @@map("addresses")
}

model CustomerAddress {
  id          String      @id @default(cuid())
  addressType AddressType @default(NONE)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  addressId  String
  address    Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)

  bookings Booking[]

  @@map("customer_addresses")
}

model EmployeeAddress {
  id          String      @id @default(cuid())
  addressType AddressType @default(NONE)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  addressId  String
  address    Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("employee_addresses")
}

model Customer {
  id          String  @id @default(cuid())
  name        String
  phoneNumber String? @unique @default("")
  imageUri    String? @default("")

  accountInfoId String      @unique
  accountInfo   AccountInfo @relation(fields: [accountInfoId], references: [id], onDelete: Cascade)

  ratings               RatingEmployee[]
  customerAddresses     CustomerAddress[]
  favoriteEmployees     FavoriteEmployee[]
  notificationCustomers NotificationCustomer[]
  bookings              Booking[]

  @@map("customers")
}

model EmployeeAccountRequest {
  id String @id @default(cuid())

  name         String
  email        String
  hashPassword String
  keyPassword  String
  status       EmployeeAccountStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@map("employee_account_requests")
}

model Employee {
  id            String  @id @default(cuid())
  name          String
  phoneNumber   String? @unique @default("")
  imageUri      String? @default("")
  description   String? @default("")
  age           Int?    @default(0)
  workingHours  Int?    @default(0)
  averageRating Float?  @default(0)

  accountInfoId String      @unique
  accountInfo   AccountInfo @relation(fields: [accountInfoId], references: [id], onDelete: Cascade)

  ratings               RatingEmployee[]
  employeeAddresses     EmployeeAddress[]
  schedules             Schedule[]
  bookingEmployees      BookingEmployee[]
  favoriteEmployees     FavoriteEmployee[]
  notificationEmployees NotificationEmployee[]

  @@map("employees")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  serviceCode String
  description String? @default("")
  imageUri    String? @default("")

  bookings       Booking[]
  serviceDetails ServiceDetails[]

  @@map("services")
}

model ServiceDetails {
  id                String  @id @default(cuid())
  name              String
  serviceDetailCode String
  description       String? @default("")
  imageUri          String? @default("")
  fee               Int     @default(0)

  serviceId             String
  service               Service                @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  bookingServiceDetails BookingServiceDetail[]

  @@map("service_details")
}

model BookingEmployee {
  id String @id @default(cuid())

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  bookingId  String
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_employees")
}

model BookingServiceDetail {
  id String @id @default(cuid())

  serviceDetailId String
  serviceDetails  ServiceDetails @relation(fields: [serviceDetailId], references: [id], onDelete: Cascade)
  bookingId       String
  booking         Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String              @id @default(cuid())
  bookingTime   DateTime            @default(now())
  status        BookingStatus       @default(PENDING)
  repeatStatus  RepeatBookingStatus @default(NO_REPEAT)
  paymentMethod PaymentMethod       @default(COD)
  note          String?             @default("")

  totalPrice Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customerId        String
  customer          Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerAddressId String
  customerAddress   CustomerAddress @relation(fields: [customerAddressId], references: [id], onDelete: Cascade)
  serviceId         String
  service           Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  bookingServiceDetails BookingServiceDetail[]
  bookingEmployees      BookingEmployee[]
  ratingEmployees       RatingEmployee[]

  @@map("bookings")
}

model Schedule {
  id           String       @id @default(cuid())
  scheduleType ScheduleType @default(NONE)

  timeRange TimeRange? @default(MORNING)
  weekDay   WeekDay?   @default(MON)

  startedAt DateTime? @default(now())
  endedAt   DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model RatingEmployee {
  id      String  @id @default(cuid())
  score   Float
  comment String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookingId  String
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("ratings_employee")
}

model FavoriteEmployee {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("favorite_employees")
}

model NotificationEmployee {
  id          String   @id @default(cuid())
  description String
  imageUri    String?  @default("")
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("notification_employees")
}

model NotificationCustomer {
  id          String   @id @default(cuid())
  description String
  imageUri    String?  @default("")
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("notification_customers")
}
