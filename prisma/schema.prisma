// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AccountInfoRole {
  ADMIN
  CUSTOMER
  EMPLOYEE
}

enum AccountStatus {
  BANNED
  NONE
  WARNING
}

enum BookingStatus {
  PENDING
  ACCEPTED
  CANCELED
  COMPLETED
}

enum PaymentMethod {
  COD
  MOMO
}

enum TimeRange {
  MORNING
  AFTERNOON
  EVENING
}

enum WeekDay {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum AddressType {
  DEFAULT
  NONE
}

enum ScheduleType {
  CUSTOM
  REGULAR
  NONE
}

model AccountInfo {
  id        String          @id @default(cuid())
  email     String          @unique
  role      AccountInfoRole @default(CUSTOMER)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  status    AccountStatus   @default(NONE)
  //type              String
  //provider          String
  //providerAccountId String
  //refresh_token     String? @db.Text
  //access_token      String? @db.Text
  //expires_at        Int?
  //token_type        String?
  //scope             String?
  //id_token          String? @db.Text
  //session_state     String?
  customer  Customer?
  employee  Employee?

  //@@unique([provider, providerAccountId])
  @@map("accounts_info")
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   expires      DateTime

//   userId       String
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model Address {
  id                String            @id @default(cuid())
  address           String
  customerAddresses CustomerAddress[]
  employeeAddresses EmployeeAddress[]

  @@map("addresses")
}

model CustomerAddress {
  id          String      @id @default(cuid())
  addressType AddressType @default(NONE)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  addressId  String
  address    Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)

  bookings Booking[]

  @@map("customer_addresses")
}

model EmployeeAddress {
  id          String      @id @default(cuid())
  addressType AddressType @default(NONE)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  addressId  String
  address    Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("employee_addresses")
}

model Customer {
  id          String @id @default(cuid())
  name        String
  phoneNumber String @unique
  imageUri    String

  accountInfoId String      @unique @map("accountId")
  accountInfo   AccountInfo @relation(fields: [accountInfoId], references: [id], onDelete: Cascade)

  ratings               RatingEmployee[]
  customerAddresses     CustomerAddress[]
  favoriteEmployees     FavoriteEmployee[]
  notificationCustomers NotificationCustomer[]

  @@map("customers")
}

model Employee {
  id           String @id @default(cuid())
  name         String
  phoneNumber  String @unique
  imageUri     String
  description  String
  age          Int
  workingHours Int

  accountInfoId String      @unique
  accountInfo   AccountInfo @relation(fields: [accountInfoId], references: [id], onDelete: Cascade)

  ratings               RatingEmployee[]
  employeeAddresses     EmployeeAddress[]
  employeeJobs          EmployeeJob[]
  schedules             Schedule[]
  bookingEmployees      BookingEmployee[]
  favoriteEmployees     FavoriteEmployee[]
  notificationEmployees NotificationEmployee[]

  @@map("employees")
}

model Job {
  id   String @id @default(cuid())
  name String

  employeeJobs EmployeeJob[]
  scheduleJobs ScheduleJob[]
  bookings     Booking[]

  @@map("jobs")
}

model EmployeeJob {
  id String @id @default(cuid())

  jobId      String
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_jobs")
}

model ScheduleJob {
  id String @id @default(cuid())

  jobId      String
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@map("schedule_jobs")
}

model Schedule {
  id           String       @id @default(cuid())
  scheduleType ScheduleType @default(NONE)

  timeRange TimeRange? @default(MORNING)
  weekDay   WeekDay?   @default(MON)

  startedAt DateTime? @default(now())
  endedAt   DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  scheduleJobs ScheduleJob[]

  @@map("schedules")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  description String?
  imageUri    String?

  bookings Booking[]

  @@map("services")
}

model BookingEmployee {
  id String @id @default(cuid())

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  bookingId  String
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_employees")
}

model Booking {
  id             String        @id @default(cuid())
  numsOfEmployee Int
  bookingTime    DateTime      @default(now())
  totalPrice     Float
  status         BookingStatus @default(PENDING)
  paymentMethod  PaymentMethod @default(COD)
  note           String?       @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceId         String
  service           Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  jobId             String
  job               Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  customerAddressId String
  customerAddress   CustomerAddress @relation(fields: [customerAddressId], references: [id], onDelete: Cascade)

  bookingEmployees BookingEmployee[]
  ratingEmployees  RatingEmployee[]

  @@map("bookings")
}

model RatingEmployee {
  id      String  @id @default(cuid())
  score   Float
  comment String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookingId  String
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("ratings_employee")
}

model FavoriteEmployee {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("favorite_employees")
}

model NotificationEmployee {
  id          String   @id @default(cuid())
  description String
  imageUri    String?
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("notification_employees")
}

model NotificationCustomer {
  id          String   @id @default(cuid())
  description String
  imageUri    String?
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("notification_customers")
}
